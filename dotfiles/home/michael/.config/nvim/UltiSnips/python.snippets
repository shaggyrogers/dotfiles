priority -50

###########################################################################
#                            TEXTMATE SNIPPETS                            #
###########################################################################

#! header
snippet shebang "" b
#!/usr/bin/env python3
$0
endsnippet

snippet header "Header for python3 modules" b
#!/usr/bin/env python3
"""
`!v '  ' . expand('%:t')`
`!v '  ' . repeat('=', len(expand('%:t')))`

`!v '  ' `Description:           ${1:TODO}
`!v '  ' `Author:                `!v g:snips_author `
`!v '  ' `Creation Date:         `!v strftime("%Y-%m-%d")`
`!v '  ' `Modification Date:     `!v strftime("%Y-%m-%d")`

"""
$0
endsnippet

snippet ifmain "if script: exit(main())" b
if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
	sys.exit(${1:${VISUAL:main}}(*sys.argv))
endsnippet

snippet main "script entry template" b
import sys


def ${1:${VISUAL:main}}(*args) -> int:
	""" ${2:TODO}

		Parameters
		----------
		TODO

		Returns
		-------
		0 if successful, or a nonzero exit code otherwise.
	"""
	$0
	return 0


if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
	sys.exit($1(*sys.argv[1:]))
endsnippet

snippet with "with" b
with ${1:expr}`!p snip.rv = " as " if t[2] else ""`${2:var}:
	${3:${VISUAL:pass}}
$0
endsnippet

snippet for "for loop" b
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
endsnippet

#################
# click Library #
#################

snippet clickmain "click library - script main() template" b
import sys

import click


@click.command()
def ${1:${VISUAL:main}}() -> int:
	""" ${2:TODO} 

		Returns 0 if successful, or a nonzero exit code otherwise.
	"""
	$0
	return 0


if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
	sys.exit($1(*sys.argv[1:]${3:, standalone_mode=True}))
endsnippet

snippet clickarg "click library - generic argument"
@click.argument(
	`!p snip.rv = get_quoting_style(snip)`${1:argument}`!p snip.rv = get_quoting_style(snip)`,
	nargs=${2:1},
	type=${3:str},
)
endsnippet

snippet clickargp "click library - path argument"
@click.argument(
	`!p snip.rv = get_quoting_style(snip)`${1:path}`!p snip.rv = get_quoting_style(snip)`,
	nargs=${2:1},
	type=click.Path(${3:exists=True})
)
endsnippet

snippet clickopt "click library - generic option"
@click.option(
	`!p snip.rv = get_quoting_style(snip)`--${1:option}`!p snip.rv = get_quoting_style(snip)`,
	help=`!p snip.rv = get_quoting_style(snip)`${2:TODO}`!p snip.rv = get_quoting_style(snip)`,
	type=${3:str},
	default=$0,
	show_default=True
)
endsnippet

snippet clickoptf "click library - boolean flag option"
@click.option(
	`!p snip.rv = get_quoting_style(snip)`--${1:option}/--no-$1`!p snip.rv = get_quoting_style(snip)`,
	help=`!p snip.rv = get_quoting_style(snip)`${2:TODO}`!p snip.rv = get_quoting_style(snip)`,
	is_flag=True,
	default=${4:False},
	show_default=True
)
endsnippet

##########
# COMMON #
##########

# The smart def and smart class snippets use a global option called
# "g:ultisnips_python_style" which, if set to "doxygen" will use doxygen
# style comments in docstrings.

global !p

NORMAL  = 0x1
DOXYGEN = 0x2
SPHINX  = 0x3
GOOGLE  = 0x4
NUMPY   = 0x5
JEDI    = 0x6

SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'


class Arg(object):
	def __init__(self, arg):
		self.arg = arg
		self.name = arg.split('=')[0].split(':')[0].strip()
		self.type = arg.split('=')[0].split(':')[1].strip() if ':' in arg else None
		self.default = arg.split('=')[1].strip() if '=' in arg else None

	def __str__(self):
		return self.name

	def __unicode__(self):
		return self.name

	def is_kwarg(self):
		return self.default is not None

	def has_typehint(self):
		return self.type is not None


def get_args(arglist):
	args = [Arg(arg) for arg in arglist.split(',') if arg]
	args = [arg for arg in args if arg.name != 'self']

	return args


def get_quoting_style(snip):
	style = snip.opt("g:ultisnips_python_quoting_style", "double")

	if style == 'single':
		return SINGLE_QUOTES

	return DOUBLE_QUOTES

def triple_quotes(snip):
	style = snip.opt("g:ultisnips_python_triple_quoting_style")

	if not style:
		return get_quoting_style(snip) * 3

	return (SINGLE_QUOTES if style == 'single' else DOUBLE_QUOTES) * 3

def triple_quotes_handle_trailing(snip, quoting_style):
	"""
	Generate triple quoted strings and handle any trailing quote char,
	which might be there from some autoclose/autopair plugin,
	i.e. when expanding ``"|"``.
	"""
	if not snip.c:
		# Do this only once, otherwise the following error would happen:
		# RuntimeError: The snippets content did not converge: â€¦
		_, col = vim.current.window.cursor
		line = vim.current.line

		# Handle already existing quote chars after the trigger.
		_ret = quoting_style * 3
		while True:
			try:
				nextc = line[col]
			except IndexError:
				break

			if nextc == quoting_style and len(_ret):
				_ret = _ret[1:]
				col = col+1
			else:
				break
		snip.rv = _ret

	else:
		snip.rv = snip.c

def get_style(snip):
	style = snip.opt("g:ultisnips_python_style", "normal")

	if    style == "doxygen": return DOXYGEN
	elif  style == "sphinx": return SPHINX
	elif  style == "google": return GOOGLE
	elif  style == "numpy": return NUMPY
	elif  style == "jedi": return JEDI
	else: return NORMAL


def format_arg(arg, style):
	if style == DOXYGEN:
		return "@param %s TODO" % arg

	elif style == SPHINX:
		return ":param %s: TODO" % arg

	elif style == NORMAL:
		return ":%s: TODO" % arg

	elif style == GOOGLE:
		return "%s (TODO): TODO" % arg

	elif style == JEDI:
		return ":type %s: TODO" % arg

	elif style == NUMPY:
		if arg.has_typehint():
			return "{0} : {1}".format(arg.name, arg.type)

		return "%s : TODO" % arg


def format_return(style):
	if style == DOXYGEN:
		return "@return: TODO"

	elif style in (NORMAL, SPHINX, JEDI):
		return ":returns: TODO"

	elif style == GOOGLE:
		return "Returns: TODO"


def write_docstring_args(args, snip):
	if not args:
		snip.rv += ' {0}'.format(triple_quotes(snip))
		return

	snip.rv += '\n' + snip.mkline('', indent='')
	style = get_style(snip)

	if style == GOOGLE:
		write_google_docstring_args(args, snip)

	elif style == NUMPY:
		write_numpy_docstring_args(args, snip)

	else:
		for arg in args:
			snip += format_arg(arg, style)


def write_google_docstring_args(args, snip):
	kwargs = [arg for arg in args if arg.is_kwarg()]
	args = [arg for arg in args if not arg.is_kwarg()]

	if args:
		snip += "Args:"
		snip.shift()

		for arg in args:
			snip += format_arg(arg, GOOGLE)

		snip.unshift()
		snip.rv += '\n' + snip.mkline('', indent='')

	if kwargs:
		snip += "Kwargs:"
		snip.shift()

		for kwarg in kwargs:
			snip += format_arg(kwarg, GOOGLE)

		snip.unshift()
		snip.rv += '\n' + snip.mkline('', indent='')


def write_numpy_docstring_args(args, snip):
	snip.shift()
	if args:
		snip += "Parameters"
		snip += "----------"

	kwargs = [arg for arg in args if arg.is_kwarg()]
	args = [arg for arg in args if not arg.is_kwarg()]

	if args:
		for arg in args:
			snip += format_arg(arg, NUMPY)

	if kwargs:
		for kwarg in kwargs:
			snip += format_arg(kwarg, NUMPY) + ', optional'

	snip.rv += '\n' + snip.mkline('', indent='')
	snip.unshift()


def write_init_body(args, parents, snip):
	parents = [p.strip() for p in parents.split(",")]
	parents = [p for p in parents if p != 'object']

	for p in parents:
		snip += p + ".__init__(self)"

	if parents:
		snip.rv += '\n' + snip.mkline('', indent='')

	for arg in args:
		snip += "self._%s = %s" % (arg, arg)


def write_slots_args(args, snip):
	quote = get_quoting_style(snip)
	arg_format = quote + '_%s' + quote
	args = [arg_format % arg for arg in args]
	snip += '__slots__ = (%s,)' % ', '.join(args)


def write_function_docstring(t, snip):
	"""
	Writes a function docstring with the current style.

	:param t: The values of the placeholders
	:param snip: UltiSnips.TextObjects.SnippetUtil object instance
	"""
	snip.rv = ""
	snip >> 1
	args = get_args(t[2])

	if args:
		write_docstring_args(args, snip)

	style = get_style(snip)

	if style == NUMPY:
		snip.shift()
		snip += 'Returns'
		snip += '-------'
		snip += 'TODO'
		snip.unshift()
	else:
		snip += format_return(style)

	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)

def get_dir_and_file_name(snip):
	return os.getcwd().split(os.sep)[-1] + '.' + snip.basename

endglobal

########################################
# Class & Special Method Name Snippets #
########################################

# Classes
snippet class "class with docstrings" b
class ${1:MyClass}(${2:parent})$6:
	`!p snip.rv = triple_quotes(snip)` ${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`

	def __init__(self$4) -> None:
		`!p snip.rv = triple_quotes(snip)` ${5:Initialises a $1 instance.}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)

if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += '{0}'.format(triple_quotes(snip))

write_init_body(args, t[2], snip)
`
		$0
endsnippet
snippet slotclass "class with slots and docstrings" b
class ${1:MyClass}:
	`!p snip.rv = triple_quotes(snip)` ${2:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
`!p
snip >> 1
args = get_args(t[4])
write_slots_args(args, snip)
`
	def __init__(self$3) -> None:
		`!p snip.rv = triple_quotes(snip)` ${4:Initialises a $1 instance.}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)

write_init_body(args, t[2], snip)
`
		$0
endsnippet

# Enum classes
snippet enum "enum class with docstrings" b
@enum.unique
class ${1:MyEnum}(${2:enum.Enum}):
	`!p snip.rv = triple_quotes(snip)` ${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
	${5:FIRST} = $0
endsnippet
snippet enumi "enum int class with docstrings" b
@enum.unique
class ${1:MyEnum}(${2:enum.IntEnum}):
	`!p snip.rv = triple_quotes(snip)` ${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
	${5:FIRST} = $0
endsnippet
snippet enumf "enum flag class with docstrings" b
@enum.unique
class ${1:MyEnum}(${2:enum.Flag}):
	`!p snip.rv = triple_quotes(snip)` ${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
	${5:NONE} = 0
	${6:FIRST} = 1 << 0
	${7:SECOND} = 1 << 1
	$0
endsnippet
snippet enumif "enum int flag class with docstrings" b
@enum.unique
class ${1:MyEnum}(${2:enum.IntFlag}):
	`!p snip.rv = triple_quotes(snip)` ${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
	${5:NONE} = 0
	${6:FIRST} = 1 << 0
	${7:SECOND} = 1 << 1
	$0
endsnippet

# Containers
snippet contain "methods for emulating a container type" b
def __len__(self) -> ${1:int}:
	""" ${2:TODO} """
	${3:pass}

def __getitem__(self, key) -> ${4:object}:
	""" ${5:TODO} """
	${6:pass}

def __setitem__(self, key, value) -> ${7:None}:
	""" ${8:TODO} """
	${9:pass}

def __delitem__(self, key) -> ${10:None}:
	""" ${11:TODO} """
	${12:pass}

def __iter__(self) -> ${13:object}:
	""" ${14:TODO} """
	${15:pass}

def __reversed__(self) -> ${16:object}:
	""" ${17:TODO} """
	${18:pass}

def __contains__(self, item) -> ${19:bool}:
	""" ${20:TODO} """
	${21:pass}
endsnippet

snippet iter "iter container method" b
def __iter__(self) -> ${1:Iterable}:
	""" ${2:TODO} """
	${2:pass}
endsnippet

snippet len "len container method" b
def __len__(self) -> ${1:int}:
	""" ${2:TODO} """
	${2:pass}
endsnippet

snippet getitem "getitem container method" b
def __getitem__(self, key: Hashable) -> ${1:object}:
	""" ${2:TODO} """
	${3:pass}
endsnippet

snippet setitem "setitem container method" b
def __setitem__(self, key: Hashable, value: Any) -> ${1:None}:
	""" ${2:TODO} """
	${3:pass}
endsnippet

snippet delitem "delitem container method" b
def __delitem__(self, key: Hashable) -> ${1:None}:
	""" ${2:TODO} """
	${3:pass}
endsnippet

snippet reversed "reversed container method" b
def __reversed__(self) -> ${1:object}:
	""" ${2:TODO} """
	${3:pass}
endsnippet

snippet contains "contains container method" b
def __contains__(self, item: Any) -> ${1:bool}:
	""" ${2:TODO} """
	${3:pass}
endsnippet

# Context managers
snippet context "context manager methods" b
def __enter__(self) -> ${1:object}:
	""" ${2:TODO} """
	${3:return self}

def __exit__(self, exc_type: Union[type, None], exc_value: Union[Exception, None], traceback: object) -> ${4:None}:
	""" ${5:TODO} """
	${6:pass}
endsnippet

# Attribute methods
snippet attr "methods for customizing attribute access" b
def __getattr__(self, name):
	${1:pass}

def __setattr__(self, name, value):
	${2:pass}

def __delattr__(self, name):
	${3:pass}
endsnippet
snippet getattr "attribute access method" b
def __getattr__(self, name: str):
	${1:pass}
endsnippet
snippet setattr "attribute set method" b
def __setattr__(self, name: str, value: Any):
	${2:pass}
endsnippet
snippet delattr "attribute delete method" b
def __delattr__(self, name: str):
	${3:pass}
endsnippet

# Descriptor methods
snippet desc "methods implementing descriptors" b
def __get__(self, instance, owner):
	${1:pass}

def __set__(self, instance, value):
	${2:pass}

def __delete__(self, instance):
	${3:pass}
endsnippet

# Comparison methods
snippet cmp "methods implementing rich comparison"
def __eq__(self, other: object) -> bool:
	${1:pass}

def __ne__(self, other: object) -> bool:
	${2:pass}

def __lt__(self, other: object):
	${3:pass}

def __le__(self, other: object):
	${4:pass}

def __gt__(self, other: object):
	${5:pass}

def __ge__(self, other: object):
	${6:pass}

def __cmp__(self, other: object):
	${7:pass}
endsnippet

# String representation methods
snippet repr "methods implementing string representation"
def __repr__(self):
	${1:pass}

def __str__(self):
	${2:pass}

def __unicode__(self):
	${3:pass}
endsnippet

# note: reflected operands and augmented arithmeitc assignements have been
# intentionally ommited to reduce verbosity.
snippet numeric "methods for emulating a numeric type" b
def __add__(self, other):
	${1:pass}

def __sub__(self, other):
	${2:pass}

def __mul__(self, other):
	${3:pass}

def __div__(self, other):
	${4:pass}

def __truediv__(self, other):
	${5:pass}

def __floordiv__(self, other):
	${6:pass}


def __mod__(self, other):
	${7:pass}

def __divmod__(self, other):
	${8:pass}

def __pow__(self, other):
	${9:pass}


def __lshift__(self, other):
	${10:pass}

def __rshift__(self, other):
	${11:pass}

def __and__(self, other):
	${12:pass}

def __xor__(self, other):
	${13:pass}

def __or__(self, other):
	${14:pass}


def __neg__(self):
	${15:pass}

def __pos__(self):
	${16:pass}

def __abs__(self):
	${17:pass}

def __invert__(self):
	${18:pass}


def __complex__(self):
	${19:pass}

def __int__(self):
	${20:pass}

def __long__(self):
	${21:pass}

def __float__(self):
	${22:pass}


def __oct__(self):
	${22:pass}

def __hex__(self):
	${23:pass}


def __index__(self):
	${24:pass}

def __coerce__(self, other):
	${25:pass}
endsnippet

# Functions / class methods
snippet deff
def ${1:fname}(`!p snip.rv = vim.eval('indent(".") ? "self" : ""')`$2) -> ${3:None}:
	$0
endsnippet
snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}) -> ${3:None}:
	`!p snip.rv = triple_quotes(snip)` ${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet
snippet defc "class method with docstrings" b
@classmethod
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg1}) -> ${3:None}:
	`!p snip.rv = triple_quotes(snip)` ${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet
snippet defs "static method with docstrings" b
@staticmethod
def ${1:function}(${2:arg1}) -> ${3:None}:
	`!p snip.rv = triple_quotes(snip)` ${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet

# doesn't expand when there is a word in front
snippet /(^|(?<=\W))\./ "self." r
self.
endsnippet

# Import
snippet from "from module import name" b
from ${1:module} import ${2:Stuff}
endsnippet


##############
# PROPERTIES #
##############
snippet roprop "Read Only Property" b
@property
def ${1:name}(self) -> ${2:object}:
	${3:return self._$1}$0
endsnippet

snippet rwprop "Read write property" b
@property
def ${1:name}(self) -> ${2:object}:
	`!p snip.rv = triple_quotes(snip)` ${3:Getter for $1.} `!p snip.rv = triple_quotes(snip)`
	${4:return self._$1}

@$1.setter
def $1(self, value: $2) -> None:
	`!p snip.rv = triple_quotes(snip)` ${5:Setter for $1.} `!p snip.rv = triple_quotes(snip)`
	${6:self._$1 = value}
endsnippet

snippet rwdprop "Read write delete property" b
@property
def ${1:name}(self) -> ${2:object}:
	`!p snip.rv = triple_quotes(snip)` ${3:Getter for $1.} `!p snip.rv = triple_quotes(snip)`
	${4:return self._$1}

@$1.setter
def $1(self, value: $2) -> None:
	`!p snip.rv = triple_quotes(snip)` ${5:Setter for $1.} `!p snip.rv = triple_quotes(snip)`
	${6:self._$1 = value}

@$1.deleter
def $1(self) -> None:
	`!p snip.rv = triple_quotes(snip)` ${7:Deleter for $1.} `!p snip.rv = triple_quotes(snip)`
	${8:self._$1 = value}
endsnippet

####################
# If / Else / Elif #
####################
snippet if "If" b
if ${1:condition}:
	${2:${VISUAL:pass}}
endsnippet
snippet ifn "If not" b
if not ${1:condition}:
	${2:${VISUAL:pass}}
endsnippet
snippet ife "If / Else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${3:pass}
endsnippet
snippet ifee "If / Elif / Else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
elif ${3:condition}:
	${4:pass}
else:
	${5:pass}
endsnippet

##########################
# Try / Except / Finally #
##########################
snippet try "Try / Except" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet
snippet trye "Try / Except / Else" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet
snippet tryf "Try / Except / Finally" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet
snippet tryef "Try / Except / Else / Finally" b
try:
	${1:${VISUAL:pass}}
except${2: ${3:Exception} as ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet

######################
# Print              #
######################
snippet pr "Print" b
print(${1})
endsnippet
snippet ps "Print string" b
print('${1}')
endsnippet
snippet pf "Print format string" b
print(f'${1}')
endsnippet

#####################
# Assertions / Misc #
#####################
snippet ae "Assert equal" b
assert ${1:${VISUAL:first}} == ${2:second}
endsnippet
snippet at "Assert True" b
assert ${1:${VISUAL:expression}}
endsnippet
snippet af "Assert False" b
assert not ${1:${VISUAL:expression}}
endsnippet
snippet an "Assert is None" b
assert ${1:${VISUAL:expression}} is None
endsnippet
snippet ann "Assert is not None" b
assert ${1:${VISUAL:expression}} is not None
endsnippet

snippet " "triple quoted string (double quotes)" b
"""
${1:${VISUAL:doc}}
`!p triple_quotes_handle_trailing(snip, '"')`
endsnippet
snippet ' "triple quoted string (single quotes)" b
'''
${1:${VISUAL:doc}}
`!p triple_quotes_handle_trailing(snip, "'")`
endsnippet
snippet doc "doc block (triple quotes)"
`!p snip.rv = triple_quotes(snip)`
${1:${VISUAL:doc}}
`!p snip.rv = triple_quotes(snip)`
endsnippet

snippet log "get logger"
log = logging.getLogger(__name__)
endsnippet

# vim: set ft=snippets fdl=0:
